
plugins {
  id "com.github.maiflai.scalatest" version "0.18"
  id "com.github.johnrengelman.shadow" version "2.0.2"
  // to build super jar invoke "gralde shadowJar"
}
apply plugin: 'scala'

jar {
  baseName = 'Compilator'
  version  = '0.1.0'
  manifest {
        attributes 'Main-Class': 'frontend.Main'
  }
}

repositories {
  mavenCentral()
}

sourceCompatibility=1.7
targetCompatibility=1.7

dependencies {
  compile("org.antlr:antlr-runtime:3.0")
  compile("org.antlr:antlr:3.0")
  compile("org.scala-lang:scala-library:2.11.12")
  testCompile('org.scalatest:scalatest_2.11:3.0.1')
  testRuntime('org.pegdown:pegdown:1.4.2')
}

test {
    maxParallelForks = 1
}

tasks.withType(ScalaCompile){
  scalaCompileOptions.additionalParameters = ["-feature","-target:jvm-1.7"]
}

task(antlr){

  ext.antlrFile = "ulNoActions.g"

  doFirst {
    println "java -cp CLASSPATH org.antlr.Tool -fo ./src/main/scala/antlr src/main/antlr/$ext.antlrFile"
    def classP  = sourceSets.main.runtimeClasspath.asPath
    def std_out = new StringBuilder()
    def std_err = new StringBuilder()

    def process = "java -cp $classP org.antlr.Tool -fo ./src/main/scala/antlr src/main/antlr/$ext.antlrFile".execute()

    process.consumeProcessOutput(std_out,std_err)
    process.waitFor()

    println "$std_out $std_err"
    if(process.exitValue() != 0){
      throw new GradleException("ERROR: $std_err")
    }
  }
}
